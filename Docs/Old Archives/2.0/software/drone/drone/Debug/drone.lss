
drone.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000168  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000f4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  00000168  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000168  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000198  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  000001d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006c9  00000000  00000000  00000208  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000639  00000000  00000000  000008d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000234  00000000  00000000  00000f0a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000060  00000000  00000000  00001140  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000362  00000000  00000000  000011a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000056  00000000  00000000  00001502  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00001558  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 48 00 	jmp	0x90	; 0x90 <__vector_14>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a2 30       	cpi	r26, 0x02	; 2
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 6c 00 	call	0xd8	; 0xd8 <main>
  88:	0c 94 78 00 	jmp	0xf0	; 0xf0 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <__vector_14>:

void scheduler(void){

}

ISR(TIMER0_COMPA_vect){
  90:	1f 92       	push	r1
  92:	0f 92       	push	r0
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	0f 92       	push	r0
  98:	11 24       	eor	r1, r1
  9a:	2f 93       	push	r18
  9c:	8f 93       	push	r24
  9e:	9f 93       	push	r25
	static twobyte counter = 0;

	if(counter < TMR)
  a0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  a4:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  a8:	84 3f       	cpi	r24, 0xF4	; 244
  aa:	21 e0       	ldi	r18, 0x01	; 1
  ac:	92 07       	cpc	r25, r18
  ae:	30 f4       	brcc	.+12     	; 0xbc <__vector_14+0x2c>
		counter++;
  b0:	01 96       	adiw	r24, 0x01	; 1
  b2:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  b6:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
  ba:	06 c0       	rjmp	.+12     	; 0xc8 <__vector_14+0x38>
	else{
		counter = 0;
  bc:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
  c0:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
		PINB = 0x20;	// toggle the led output status
  c4:	80 e2       	ldi	r24, 0x20	; 32
  c6:	83 b9       	out	0x03, r24	; 3
	}
	scheduler();
}
  c8:	9f 91       	pop	r25
  ca:	8f 91       	pop	r24
  cc:	2f 91       	pop	r18
  ce:	0f 90       	pop	r0
  d0:	0f be       	out	0x3f, r0	; 63
  d2:	0f 90       	pop	r0
  d4:	1f 90       	pop	r1
  d6:	18 95       	reti

000000d8 <main>:

int main(void){
	DDRB = 0xFF;		// PORTB is output
  d8:	8f ef       	ldi	r24, 0xFF	; 255
  da:	84 b9       	out	0x04, r24	; 4
	sei();				// global interrupts enable
  dc:	78 94       	sei
	TCCR0A = 0x02;		// timer0 CTC mode
  de:	82 e0       	ldi	r24, 0x02	; 2
  e0:	84 bd       	out	0x24, r24	; 36
	TCCR0B = 0x03;		// timer0 prescaler 64
  e2:	93 e0       	ldi	r25, 0x03	; 3
  e4:	95 bd       	out	0x25, r25	; 37
	OCR0A = 0xF9;		// 249 in hex
  e6:	99 ef       	ldi	r25, 0xF9	; 249
  e8:	97 bd       	out	0x27, r25	; 39
	TIMSK0 = 0x02;		// timer0 compareA interrupt enable
  ea:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
  ee:	ff cf       	rjmp	.-2      	; 0xee <main+0x16>

000000f0 <_exit>:
  f0:	f8 94       	cli

000000f2 <__stop_program>:
  f2:	ff cf       	rjmp	.-2      	; 0xf2 <__stop_program>
